require 'rails_helper'
include Warden::Test::Helpers
Warden.test_mode!
require "spec_helper"

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe ArticlesController, :type => :controller do

  include Devise::TestHelpers
render_views
  # This should return the minimal set of attributes required to create a valid
  # Article. As you add validations to Article, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    skip("Add a hash of attributes valid for your model")
  }

  let(:invalid_attributes) {
    skip("Add a hash of attributes invalid for your model")
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # ArticlesController. Be sure to keep this updated too.
  let(:valid_session) { {} }
 
  describe "GET index" do
    it "has a 200 status code" do
      get :index
      expect(response.status).to eq(200)
    end
  end

  
 describe "GET show" do
    it "assigns the requested article as @article" do
      article = Article.create! 
      get :show, {:id => article.to_param}, valid_session
      expect(assigns(:article)).to eq(article)
    end
  end


   describe "GET new" do
    it "has a 200 status code" do
      get :new 
      expect(response.status).to eq(200)
    end
  end

  describe "GET edit" do
    it "assigns the requested article as @article" do
      article = Article.create! 
      get :edit, {:id => article.to_param}, valid_session
      expect(assigns(:article)).to eq(article)
    end
  end

  describe "ARTICLE create" do
    it "has a 200 status code" do
      post :create , :article => {:id => '3', :article => 'uyugvgbububu'}
      expect(response.status).to eq(302)
        # Warden.test_reset!
    end

    
  end

 

describe "PUT update" do
    describe "with valid params" do
     it "updates the requested article" do
        @article= FactoryGirl.create(:article)
        put :update, {:id => @article.id, article: @article.attributes}
        @article.reload
      end

      it "assigns the requested article as @article" do
        @article= FactoryGirl.create(:article)
        put :update, {:id => @article.id, article: @article.attributes}
        expect(assigns(:article)).to eq(@article)
      end

      it "redirects to the article" do
        @article= FactoryGirl.create(:article)
        put :update, {:id => @article.id, article: @article.attributes}
        expect(response).to redirect_to(@article)
      end
    end

    describe "with invalid params" do
      it "assigns the article as @article" do
        @article= FactoryGirl.create(:article)
        put :update, {:id => @article.id, article: @article.attributes}
        expect(assigns(:article)).to eq(@article)
      end
      
      
    end
  end

 describe "DELETE destroy" do
    it "destroys the requested article" do
      article = Article.create! 
      expect {
        delete :destroy, {:id => article.to_param}, valid_session
      }.to change(Article, :count).by(-1)
    end

    it "redirects to the articles list" do
      article = Article.create! 
      delete :destroy, {:id => article.to_param}, valid_session
      expect(response).to redirect_to(articles_url)
    end
  end


end
